//stair_climb_problem.
//give number of ways in which n stairs can be climb by using either 1 or 2 or 3 step jump at a time.

#include<stdio.h>

int stairs(int n)
{
    //base case 1
    if(n<0)
    {
        return 0;
    }
    //base case 2
    if(n == 0)
    {
        return 1;
    }

    // recursive call
    int ans = stairs(n-1)+stairs(n-2)+stairs(n-3);

    return ans;
}


int main()
{
    int n,j;
    printf("enter number of starirs:");
    scanf("%d",&n);
    printf("%d",stairs(n));
}


//fibonacci series starting with indexing 0 .

#include<stdio.h>

int fibo( int n)
{
    //base case1
    if(n==0)
    {
        return 0;
    }
    // base case 2
    if(n==1)
    {
        return 1;
    }

    //recursive call
    int ans = fibo(n-1)+fibo(n-2);

    return ans ;
}
int main()
{
    int n;
    printf("enter index of fibonacci series:");
    scanf("%d",&n);
    printf("%d",fibo(n));
    return 0;
}

//print name of digits of given number

#include<stdio.h>
#include<math.h>

int say_digit(int n)
{
    //base case
    if(n<=0)
    {
        return 0;
    }
    
    int num = n%10 ;
    n = n/10 ;
    say_digit(n);
    switch(num)
    {
        case 0:
        printf("Zero ");
        break;

        case 1:
        printf("One ");
        break;

        case 2:
        printf("Two ");
        break;

        case 3:
        printf("Three ");
        break;

        case 4:
        printf("Four ");
        break;

        case 5:
        printf("Five ");
        break;

        case 6:
        printf("Six ");
        break;

        case 7:
        printf("Seven ");
        break;

        case 8:
        printf("Eight ");
        break;

        case 9:
        printf("Nine ");
        break;
    
    }
    
}

int main()
{
    int n ;
    printf("enter number:");
    scanf("%d",&n);
    say_digit(n);
    return 0;
}
